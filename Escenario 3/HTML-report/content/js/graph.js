/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 19326.0, "minX": 0.0, "maxY": 174622.0, "series": [{"data": [[0.0, 19326.0], [0.1, 19505.0], [0.2, 19507.0], [0.3, 19507.0], [0.4, 19728.0], [0.5, 20278.0], [0.6, 20661.0], [0.7, 20889.0], [0.8, 20984.0], [0.9, 21004.0], [1.0, 21009.0], [1.1, 21010.0], [1.2, 21010.0], [1.3, 21010.0], [1.4, 21011.0], [1.5, 21011.0], [1.6, 21012.0], [1.7, 21012.0], [1.8, 21013.0], [1.9, 21013.0], [2.0, 21014.0], [2.1, 21014.0], [2.2, 21015.0], [2.3, 21016.0], [2.4, 21016.0], [2.5, 21017.0], [2.6, 21017.0], [2.7, 21018.0], [2.8, 21018.0], [2.9, 21018.0], [3.0, 21019.0], [3.1, 21019.0], [3.2, 21020.0], [3.3, 21020.0], [3.4, 21021.0], [3.5, 21021.0], [3.6, 21021.0], [3.7, 21022.0], [3.8, 21022.0], [3.9, 21022.0], [4.0, 21022.0], [4.1, 21022.0], [4.2, 21022.0], [4.3, 21022.0], [4.4, 21023.0], [4.5, 21023.0], [4.6, 21023.0], [4.7, 21023.0], [4.8, 21023.0], [4.9, 21024.0], [5.0, 21024.0], [5.1, 21024.0], [5.2, 21024.0], [5.3, 21024.0], [5.4, 21024.0], [5.5, 21024.0], [5.6, 21025.0], [5.7, 21025.0], [5.8, 21025.0], [5.9, 21025.0], [6.0, 21025.0], [6.1, 21025.0], [6.2, 21025.0], [6.3, 21025.0], [6.4, 21025.0], [6.5, 21026.0], [6.6, 21026.0], [6.7, 21026.0], [6.8, 21026.0], [6.9, 21026.0], [7.0, 21026.0], [7.1, 21026.0], [7.2, 21026.0], [7.3, 21027.0], [7.4, 21027.0], [7.5, 21027.0], [7.6, 21027.0], [7.7, 21027.0], [7.8, 21028.0], [7.9, 21028.0], [8.0, 21028.0], [8.1, 21028.0], [8.2, 21028.0], [8.3, 21028.0], [8.4, 21029.0], [8.5, 21029.0], [8.6, 21029.0], [8.7, 21029.0], [8.8, 21029.0], [8.9, 21029.0], [9.0, 21029.0], [9.1, 21029.0], [9.2, 21029.0], [9.3, 21029.0], [9.4, 21029.0], [9.5, 21029.0], [9.6, 21029.0], [9.7, 21029.0], [9.8, 21029.0], [9.9, 21029.0], [10.0, 21030.0], [10.1, 21030.0], [10.2, 21030.0], [10.3, 21030.0], [10.4, 21030.0], [10.5, 21030.0], [10.6, 21030.0], [10.7, 21030.0], [10.8, 21030.0], [10.9, 21030.0], [11.0, 21030.0], [11.1, 21030.0], [11.2, 21030.0], [11.3, 21030.0], [11.4, 21030.0], [11.5, 21030.0], [11.6, 21030.0], [11.7, 21031.0], [11.8, 21031.0], [11.9, 21031.0], [12.0, 21031.0], [12.1, 21031.0], [12.2, 21031.0], [12.3, 21031.0], [12.4, 21031.0], [12.5, 21031.0], [12.6, 21031.0], [12.7, 21031.0], [12.8, 21031.0], [12.9, 21031.0], [13.0, 21031.0], [13.1, 21031.0], [13.2, 21031.0], [13.3, 21031.0], [13.4, 21031.0], [13.5, 21031.0], [13.6, 21032.0], [13.7, 21032.0], [13.8, 21032.0], [13.9, 21032.0], [14.0, 21032.0], [14.1, 21032.0], [14.2, 21032.0], [14.3, 21032.0], [14.4, 21032.0], [14.5, 21032.0], [14.6, 21032.0], [14.7, 21032.0], [14.8, 21033.0], [14.9, 21033.0], [15.0, 21033.0], [15.1, 21033.0], [15.2, 21033.0], [15.3, 21033.0], [15.4, 21033.0], [15.5, 21033.0], [15.6, 21033.0], [15.7, 21033.0], [15.8, 21033.0], [15.9, 21033.0], [16.0, 21033.0], [16.1, 21033.0], [16.2, 21033.0], [16.3, 21033.0], [16.4, 21033.0], [16.5, 21033.0], [16.6, 21033.0], [16.7, 21033.0], [16.8, 21033.0], [16.9, 21034.0], [17.0, 21034.0], [17.1, 21034.0], [17.2, 21034.0], [17.3, 21034.0], [17.4, 21034.0], [17.5, 21034.0], [17.6, 21034.0], [17.7, 21034.0], [17.8, 21034.0], [17.9, 21034.0], [18.0, 21034.0], [18.1, 21034.0], [18.2, 21034.0], [18.3, 21035.0], [18.4, 21035.0], [18.5, 21035.0], [18.6, 21035.0], [18.7, 21035.0], [18.8, 21035.0], [18.9, 21035.0], [19.0, 21035.0], [19.1, 21035.0], [19.2, 21035.0], [19.3, 21035.0], [19.4, 21035.0], [19.5, 21036.0], [19.6, 21036.0], [19.7, 21036.0], [19.8, 21036.0], [19.9, 21036.0], [20.0, 21036.0], [20.1, 21036.0], [20.2, 21036.0], [20.3, 21036.0], [20.4, 21036.0], [20.5, 21036.0], [20.6, 21036.0], [20.7, 21036.0], [20.8, 21036.0], [20.9, 21036.0], [21.0, 21036.0], [21.1, 21036.0], [21.2, 21036.0], [21.3, 21036.0], [21.4, 21037.0], [21.5, 21037.0], [21.6, 21037.0], [21.7, 21037.0], [21.8, 21037.0], [21.9, 21037.0], [22.0, 21037.0], [22.1, 21037.0], [22.2, 21037.0], [22.3, 21037.0], [22.4, 21037.0], [22.5, 21037.0], [22.6, 21037.0], [22.7, 21037.0], [22.8, 21037.0], [22.9, 21037.0], [23.0, 21038.0], [23.1, 21038.0], [23.2, 21038.0], [23.3, 21038.0], [23.4, 21038.0], [23.5, 21038.0], [23.6, 21038.0], [23.7, 21038.0], [23.8, 21038.0], [23.9, 21038.0], [24.0, 21038.0], [24.1, 21038.0], [24.2, 21038.0], [24.3, 21038.0], [24.4, 21038.0], [24.5, 21038.0], [24.6, 21039.0], [24.7, 21039.0], [24.8, 21039.0], [24.9, 21039.0], [25.0, 21039.0], [25.1, 21039.0], [25.2, 21039.0], [25.3, 21039.0], [25.4, 21039.0], [25.5, 21039.0], [25.6, 21039.0], [25.7, 21039.0], [25.8, 21039.0], [25.9, 21039.0], [26.0, 21039.0], [26.1, 21039.0], [26.2, 21039.0], [26.3, 21039.0], [26.4, 21039.0], [26.5, 21039.0], [26.6, 21040.0], [26.7, 21040.0], [26.8, 21040.0], [26.9, 21040.0], [27.0, 21040.0], [27.1, 21040.0], [27.2, 21040.0], [27.3, 21040.0], [27.4, 21040.0], [27.5, 21040.0], [27.6, 21040.0], [27.7, 21040.0], [27.8, 21040.0], [27.9, 21040.0], [28.0, 21040.0], [28.1, 21040.0], [28.2, 21040.0], [28.3, 21040.0], [28.4, 21040.0], [28.5, 21040.0], [28.6, 21041.0], [28.7, 21041.0], [28.8, 21041.0], [28.9, 21041.0], [29.0, 21041.0], [29.1, 21041.0], [29.2, 21041.0], [29.3, 21041.0], [29.4, 21041.0], [29.5, 21041.0], [29.6, 21041.0], [29.7, 21041.0], [29.8, 21041.0], [29.9, 21041.0], [30.0, 21041.0], [30.1, 21042.0], [30.2, 21042.0], [30.3, 21042.0], [30.4, 21042.0], [30.5, 21042.0], [30.6, 21042.0], [30.7, 21042.0], [30.8, 21042.0], [30.9, 21042.0], [31.0, 21042.0], [31.1, 21042.0], [31.2, 21042.0], [31.3, 21042.0], [31.4, 21042.0], [31.5, 21042.0], [31.6, 21042.0], [31.7, 21042.0], [31.8, 21042.0], [31.9, 21042.0], [32.0, 21042.0], [32.1, 21042.0], [32.2, 21043.0], [32.3, 21043.0], [32.4, 21043.0], [32.5, 21043.0], [32.6, 21043.0], [32.7, 21043.0], [32.8, 21043.0], [32.9, 21043.0], [33.0, 21043.0], [33.1, 21043.0], [33.2, 21043.0], [33.3, 21043.0], [33.4, 21043.0], [33.5, 21043.0], [33.6, 21043.0], [33.7, 21044.0], [33.8, 21044.0], [33.9, 21044.0], [34.0, 21044.0], [34.1, 21044.0], [34.2, 21044.0], [34.3, 21044.0], [34.4, 21044.0], [34.5, 21044.0], [34.6, 21044.0], [34.7, 21044.0], [34.8, 21044.0], [34.9, 21044.0], [35.0, 21044.0], [35.1, 21044.0], [35.2, 21045.0], [35.3, 21045.0], [35.4, 21045.0], [35.5, 21045.0], [35.6, 21045.0], [35.7, 21045.0], [35.8, 21045.0], [35.9, 21045.0], [36.0, 21045.0], [36.1, 21045.0], [36.2, 21045.0], [36.3, 21045.0], [36.4, 21045.0], [36.5, 21045.0], [36.6, 21046.0], [36.7, 21046.0], [36.8, 21046.0], [36.9, 21046.0], [37.0, 21046.0], [37.1, 21046.0], [37.2, 21046.0], [37.3, 21046.0], [37.4, 21046.0], [37.5, 21046.0], [37.6, 21046.0], [37.7, 21047.0], [37.8, 21047.0], [37.9, 21047.0], [38.0, 21047.0], [38.1, 21047.0], [38.2, 21047.0], [38.3, 21047.0], [38.4, 21047.0], [38.5, 21047.0], [38.6, 21048.0], [38.7, 21048.0], [38.8, 21048.0], [38.9, 21048.0], [39.0, 21048.0], [39.1, 21048.0], [39.2, 21048.0], [39.3, 21048.0], [39.4, 21048.0], [39.5, 21048.0], [39.6, 21048.0], [39.7, 21048.0], [39.8, 21048.0], [39.9, 21048.0], [40.0, 21049.0], [40.1, 21049.0], [40.2, 21049.0], [40.3, 21049.0], [40.4, 21049.0], [40.5, 21049.0], [40.6, 21049.0], [40.7, 21049.0], [40.8, 21049.0], [40.9, 21049.0], [41.0, 21049.0], [41.1, 21049.0], [41.2, 21049.0], [41.3, 21049.0], [41.4, 21049.0], [41.5, 21050.0], [41.6, 21050.0], [41.7, 21050.0], [41.8, 21050.0], [41.9, 21050.0], [42.0, 21050.0], [42.1, 21050.0], [42.2, 21050.0], [42.3, 21050.0], [42.4, 21050.0], [42.5, 21050.0], [42.6, 21050.0], [42.7, 21051.0], [42.8, 21051.0], [42.9, 21051.0], [43.0, 21051.0], [43.1, 21051.0], [43.2, 21051.0], [43.3, 21051.0], [43.4, 21051.0], [43.5, 21051.0], [43.6, 21051.0], [43.7, 21051.0], [43.8, 21051.0], [43.9, 21051.0], [44.0, 21052.0], [44.1, 21052.0], [44.2, 21052.0], [44.3, 21052.0], [44.4, 21052.0], [44.5, 21052.0], [44.6, 21052.0], [44.7, 21052.0], [44.8, 21052.0], [44.9, 21053.0], [45.0, 21053.0], [45.1, 21053.0], [45.2, 21053.0], [45.3, 21053.0], [45.4, 21053.0], [45.5, 21053.0], [45.6, 21053.0], [45.7, 21053.0], [45.8, 21053.0], [45.9, 21054.0], [46.0, 21054.0], [46.1, 21054.0], [46.2, 21054.0], [46.3, 21054.0], [46.4, 21055.0], [46.5, 21055.0], [46.6, 21055.0], [46.7, 21055.0], [46.8, 21055.0], [46.9, 21055.0], [47.0, 21055.0], [47.1, 21055.0], [47.2, 21055.0], [47.3, 21055.0], [47.4, 21055.0], [47.5, 21056.0], [47.6, 21056.0], [47.7, 21056.0], [47.8, 21056.0], [47.9, 21056.0], [48.0, 21056.0], [48.1, 21056.0], [48.2, 21056.0], [48.3, 21056.0], [48.4, 21056.0], [48.5, 21057.0], [48.6, 21057.0], [48.7, 21057.0], [48.8, 21057.0], [48.9, 21058.0], [49.0, 21058.0], [49.1, 21058.0], [49.2, 21058.0], [49.3, 21058.0], [49.4, 21058.0], [49.5, 21058.0], [49.6, 21058.0], [49.7, 21059.0], [49.8, 21059.0], [49.9, 21059.0], [50.0, 21059.0], [50.1, 21059.0], [50.2, 21059.0], [50.3, 21059.0], [50.4, 21059.0], [50.5, 21060.0], [50.6, 21060.0], [50.7, 21060.0], [50.8, 21061.0], [50.9, 21062.0], [51.0, 21062.0], [51.1, 21062.0], [51.2, 21063.0], [51.3, 21063.0], [51.4, 21064.0], [51.5, 21064.0], [51.6, 21065.0], [51.7, 21065.0], [51.8, 21066.0], [51.9, 21067.0], [52.0, 21070.0], [52.1, 21070.0], [52.2, 21070.0], [52.3, 21073.0], [52.4, 21125.0], [52.5, 21869.0], [52.6, 22865.0], [52.7, 23279.0], [52.8, 23499.0], [52.9, 23505.0], [53.0, 23824.0], [53.1, 24209.0], [53.2, 24361.0], [53.3, 24361.0], [53.4, 24499.0], [53.5, 24667.0], [53.6, 24897.0], [53.7, 25086.0], [53.8, 25328.0], [53.9, 26002.0], [54.0, 26373.0], [54.1, 26883.0], [54.2, 27145.0], [54.3, 27396.0], [54.4, 27420.0], [54.5, 27690.0], [54.6, 27808.0], [54.7, 28436.0], [54.8, 28807.0], [54.9, 28845.0], [55.0, 29354.0], [55.1, 29663.0], [55.2, 29686.0], [55.3, 29857.0], [55.4, 29943.0], [55.5, 29972.0], [55.6, 30030.0], [55.7, 30151.0], [55.8, 30235.0], [55.9, 30289.0], [56.0, 30329.0], [56.1, 30337.0], [56.2, 30470.0], [56.3, 30477.0], [56.4, 30498.0], [56.5, 31376.0], [56.6, 31647.0], [56.7, 31953.0], [56.8, 32036.0], [56.9, 33806.0], [57.0, 74885.0], [57.1, 74895.0], [57.2, 74904.0], [57.3, 75081.0], [57.4, 75719.0], [57.5, 75729.0], [57.6, 75739.0], [57.7, 75749.0], [57.8, 77862.0], [57.9, 77869.0], [58.0, 77881.0], [58.1, 77889.0], [58.2, 77898.0], [58.3, 77905.0], [58.4, 77915.0], [58.5, 77925.0], [58.6, 77935.0], [58.7, 77939.0], [58.8, 77955.0], [58.9, 77962.0], [59.0, 78361.0], [59.1, 78373.0], [59.2, 78384.0], [59.3, 78392.0], [59.4, 78467.0], [59.5, 78472.0], [59.6, 78483.0], [59.7, 78578.0], [59.8, 78590.0], [59.9, 78601.0], [60.0, 78607.0], [60.1, 78610.0], [60.2, 85713.0], [60.3, 85723.0], [60.4, 85749.0], [60.5, 85921.0], [60.6, 85932.0], [60.7, 85941.0], [60.8, 85951.0], [60.9, 85953.0], [61.0, 85965.0], [61.1, 85982.0], [61.2, 85989.0], [61.3, 85991.0], [61.4, 85994.0], [61.5, 85996.0], [61.6, 85998.0], [61.7, 86003.0], [61.8, 86011.0], [61.9, 86018.0], [62.0, 86024.0], [62.1, 86370.0], [62.2, 86380.0], [62.3, 86389.0], [62.4, 86391.0], [62.5, 86399.0], [62.6, 86407.0], [62.7, 86415.0], [62.8, 86418.0], [62.9, 86420.0], [63.0, 86426.0], [63.1, 86434.0], [63.2, 86435.0], [63.3, 86440.0], [63.4, 86441.0], [63.5, 86441.0], [63.6, 86445.0], [63.7, 86453.0], [63.8, 86455.0], [63.9, 86457.0], [64.0, 86460.0], [64.1, 86466.0], [64.2, 86474.0], [64.3, 86482.0], [64.4, 86483.0], [64.5, 86493.0], [64.6, 86495.0], [64.7, 86495.0], [64.8, 86495.0], [64.9, 86500.0], [65.0, 86502.0], [65.1, 86505.0], [65.2, 86508.0], [65.3, 86511.0], [65.4, 86514.0], [65.5, 86520.0], [65.6, 86534.0], [65.7, 86535.0], [65.8, 86544.0], [65.9, 86545.0], [66.0, 86552.0], [66.1, 86574.0], [66.2, 86712.0], [66.3, 86739.0], [66.4, 86749.0], [66.5, 86760.0], [66.6, 86769.0], [66.7, 86779.0], [66.8, 86789.0], [66.9, 86798.0], [67.0, 86799.0], [67.1, 86809.0], [67.2, 86811.0], [67.3, 86814.0], [67.4, 86815.0], [67.5, 86821.0], [67.6, 86834.0], [67.7, 86837.0], [67.8, 86841.0], [67.9, 86846.0], [68.0, 86855.0], [68.1, 86857.0], [68.2, 86858.0], [68.3, 86863.0], [68.4, 86870.0], [68.5, 86872.0], [68.6, 86877.0], [68.7, 86881.0], [68.8, 86887.0], [68.9, 86889.0], [69.0, 86896.0], [69.1, 86910.0], [69.2, 88499.0], [69.3, 88601.0], [69.4, 114419.0], [69.5, 121257.0], [69.6, 128872.0], [69.7, 129070.0], [69.8, 129080.0], [69.9, 129099.0], [70.0, 129425.0], [70.1, 129435.0], [70.2, 129445.0], [70.3, 129458.0], [70.4, 129929.0], [70.5, 130113.0], [70.6, 130120.0], [70.7, 130332.0], [70.8, 130334.0], [70.9, 130371.0], [71.0, 149800.0], [71.1, 149801.0], [71.2, 150951.0], [71.3, 150974.0], [71.4, 150984.0], [71.5, 151059.0], [71.6, 154704.0], [71.7, 154725.0], [71.8, 154762.0], [71.9, 154773.0], [72.0, 154785.0], [72.1, 154821.0], [72.2, 154823.0], [72.3, 154840.0], [72.4, 154864.0], [72.5, 154883.0], [72.6, 154886.0], [72.7, 154897.0], [72.8, 154904.0], [72.9, 154904.0], [73.0, 154905.0], [73.1, 154917.0], [73.2, 155372.0], [73.3, 156480.0], [73.4, 156877.0], [73.5, 159367.0], [73.6, 160518.0], [73.7, 160521.0], [73.8, 160643.0], [73.9, 160648.0], [74.0, 160654.0], [74.1, 160655.0], [74.2, 160655.0], [74.3, 160662.0], [74.4, 160668.0], [74.5, 160677.0], [74.6, 160691.0], [74.7, 160694.0], [74.8, 160699.0], [74.9, 160729.0], [75.0, 160729.0], [75.1, 160740.0], [75.2, 160859.0], [75.3, 161048.0], [75.4, 161363.0], [75.5, 161961.0], [75.6, 162879.0], [75.7, 163676.0], [75.8, 163877.0], [75.9, 165533.0], [76.0, 165786.0], [76.1, 165843.0], [76.2, 166874.0], [76.3, 169109.0], [76.4, 169400.0], [76.5, 169403.0], [76.6, 169408.0], [76.7, 169437.0], [76.8, 169475.0], [76.9, 169488.0], [77.0, 169493.0], [77.1, 169592.0], [77.2, 169598.0], [77.3, 169605.0], [77.4, 169618.0], [77.5, 169626.0], [77.6, 169637.0], [77.7, 169768.0], [77.8, 169771.0], [77.9, 169771.0], [78.0, 169774.0], [78.1, 169777.0], [78.2, 169782.0], [78.3, 169784.0], [78.4, 169787.0], [78.5, 169792.0], [78.6, 169793.0], [78.7, 169793.0], [78.8, 169794.0], [78.9, 169798.0], [79.0, 169801.0], [79.1, 169804.0], [79.2, 169807.0], [79.3, 169808.0], [79.4, 169812.0], [79.5, 169812.0], [79.6, 169814.0], [79.7, 169814.0], [79.8, 169817.0], [79.9, 169818.0], [80.0, 169822.0], [80.1, 169823.0], [80.2, 169825.0], [80.3, 169826.0], [80.4, 169831.0], [80.5, 169840.0], [80.6, 169840.0], [80.7, 169841.0], [80.8, 169846.0], [80.9, 169848.0], [81.0, 169851.0], [81.1, 169857.0], [81.2, 169862.0], [81.3, 169871.0], [81.4, 169878.0], [81.5, 169879.0], [81.6, 169882.0], [81.7, 169886.0], [81.8, 169887.0], [81.9, 169888.0], [82.0, 169890.0], [82.1, 169892.0], [82.2, 169899.0], [82.3, 169899.0], [82.4, 169901.0], [82.5, 169909.0], [82.6, 169911.0], [82.7, 169967.0], [82.8, 169975.0], [82.9, 169977.0], [83.0, 169985.0], [83.1, 169997.0], [83.2, 170067.0], [83.3, 170076.0], [83.4, 170077.0], [83.5, 170087.0], [83.6, 170091.0], [83.7, 170097.0], [83.8, 170100.0], [83.9, 170105.0], [84.0, 170105.0], [84.1, 170106.0], [84.2, 170114.0], [84.3, 170116.0], [84.4, 170126.0], [84.5, 170130.0], [84.6, 170136.0], [84.7, 170137.0], [84.8, 170146.0], [84.9, 170173.0], [85.0, 170211.0], [85.1, 170221.0], [85.2, 170231.0], [85.3, 170238.0], [85.4, 170238.0], [85.5, 170248.0], [85.6, 170256.0], [85.7, 170257.0], [85.8, 170266.0], [85.9, 170270.0], [86.0, 170274.0], [86.1, 170277.0], [86.2, 170340.0], [86.3, 170391.0], [86.4, 170397.0], [86.5, 170400.0], [86.6, 170412.0], [86.7, 170420.0], [86.8, 170537.0], [86.9, 170835.0], [87.0, 171014.0], [87.1, 171022.0], [87.2, 171036.0], [87.3, 171042.0], [87.4, 171063.0], [87.5, 171064.0], [87.6, 171072.0], [87.7, 171080.0], [87.8, 171082.0], [87.9, 171101.0], [88.0, 171103.0], [88.1, 171167.0], [88.2, 171178.0], [88.3, 171466.0], [88.4, 171880.0], [88.5, 171931.0], [88.6, 171972.0], [88.7, 173467.0], [88.8, 174007.0], [88.9, 174049.0], [89.0, 174249.0], [89.1, 174311.0], [89.2, 174317.0], [89.3, 174326.0], [89.4, 174337.0], [89.5, 174357.0], [89.6, 174359.0], [89.7, 174361.0], [89.8, 174367.0], [89.9, 174370.0], [90.0, 174377.0], [90.1, 174380.0], [90.2, 174380.0], [90.3, 174389.0], [90.4, 174390.0], [90.5, 174399.0], [90.6, 174400.0], [90.7, 174401.0], [90.8, 174402.0], [90.9, 174404.0], [91.0, 174409.0], [91.1, 174410.0], [91.2, 174413.0], [91.3, 174413.0], [91.4, 174414.0], [91.5, 174417.0], [91.6, 174420.0], [91.7, 174425.0], [91.8, 174426.0], [91.9, 174427.0], [92.0, 174429.0], [92.1, 174430.0], [92.2, 174434.0], [92.3, 174437.0], [92.4, 174439.0], [92.5, 174439.0], [92.6, 174442.0], [92.7, 174445.0], [92.8, 174445.0], [92.9, 174446.0], [93.0, 174447.0], [93.1, 174448.0], [93.2, 174450.0], [93.3, 174454.0], [93.4, 174455.0], [93.5, 174456.0], [93.6, 174457.0], [93.7, 174458.0], [93.8, 174460.0], [93.9, 174460.0], [94.0, 174461.0], [94.1, 174465.0], [94.2, 174469.0], [94.3, 174470.0], [94.4, 174472.0], [94.5, 174472.0], [94.6, 174480.0], [94.7, 174481.0], [94.8, 174486.0], [94.9, 174487.0], [95.0, 174487.0], [95.1, 174489.0], [95.2, 174489.0], [95.3, 174490.0], [95.4, 174491.0], [95.5, 174493.0], [95.6, 174495.0], [95.7, 174495.0], [95.8, 174497.0], [95.9, 174498.0], [96.0, 174498.0], [96.1, 174500.0], [96.2, 174500.0], [96.3, 174502.0], [96.4, 174503.0], [96.5, 174503.0], [96.6, 174506.0], [96.7, 174508.0], [96.8, 174510.0], [96.9, 174512.0], [97.0, 174513.0], [97.1, 174519.0], [97.2, 174519.0], [97.3, 174520.0], [97.4, 174521.0], [97.5, 174521.0], [97.6, 174528.0], [97.7, 174530.0], [97.8, 174530.0], [97.9, 174534.0], [98.0, 174535.0], [98.1, 174537.0], [98.2, 174540.0], [98.3, 174546.0], [98.4, 174550.0], [98.5, 174551.0], [98.6, 174552.0], [98.7, 174553.0], [98.8, 174558.0], [98.9, 174561.0], [99.0, 174562.0], [99.1, 174568.0], [99.2, 174571.0], [99.3, 174572.0], [99.4, 174583.0], [99.5, 174589.0], [99.6, 174592.0], [99.7, 174603.0], [99.8, 174613.0], [99.9, 174622.0]], "isOverall": false, "label": "get info ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 19300.0, "maxY": 515.0, "series": [{"data": [[156800.0, 1.0], [160800.0, 1.0], [169600.0, 4.0], [170400.0, 3.0], [174400.0, 55.0], [155300.0, 1.0], [159300.0, 1.0], [165700.0, 1.0], [170500.0, 1.0], [169700.0, 13.0], [174500.0, 36.0], [77900.0, 7.0], [78300.0, 4.0], [85900.0, 12.0], [86300.0, 5.0], [86700.0, 10.0], [129900.0, 1.0], [130300.0, 3.0], [149800.0, 2.0], [161000.0, 1.0], [165800.0, 1.0], [171400.0, 1.0], [169800.0, 34.0], [174600.0, 3.0], [154700.0, 5.0], [161900.0, 1.0], [169100.0, 1.0], [169900.0, 8.0], [75000.0, 1.0], [77800.0, 5.0], [78600.0, 3.0], [88600.0, 1.0], [129000.0, 3.0], [129400.0, 4.0], [154800.0, 7.0], [156400.0, 1.0], [162800.0, 1.0], [163600.0, 1.0], [166800.0, 1.0], [170000.0, 6.0], [170800.0, 1.0], [174000.0, 2.0], [150900.0, 3.0], [154900.0, 4.0], [161300.0, 1.0], [160500.0, 2.0], [170100.0, 12.0], [74900.0, 1.0], [75700.0, 4.0], [78500.0, 2.0], [85700.0, 3.0], [86500.0, 13.0], [86900.0, 1.0], [130100.0, 2.0], [151000.0, 1.0], [160600.0, 11.0], [163800.0, 1.0], [170200.0, 12.0], [171000.0, 9.0], [169400.0, 7.0], [171800.0, 1.0], [173400.0, 1.0], [174200.0, 1.0], [19300.0, 1.0], [19500.0, 2.0], [19600.0, 1.0], [19700.0, 1.0], [20200.0, 1.0], [20600.0, 1.0], [20900.0, 1.0], [20800.0, 1.0], [21100.0, 1.0], [21000.0, 515.0], [21800.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [23500.0, 1.0], [23400.0, 1.0], [23800.0, 1.0], [24200.0, 1.0], [24300.0, 1.0], [24400.0, 1.0], [24600.0, 1.0], [24800.0, 1.0], [25000.0, 1.0], [25300.0, 1.0], [26000.0, 1.0], [26300.0, 1.0], [26800.0, 1.0], [27100.0, 1.0], [27400.0, 1.0], [27300.0, 1.0], [27600.0, 1.0], [27800.0, 1.0], [28400.0, 1.0], [28800.0, 2.0], [29300.0, 1.0], [29600.0, 2.0], [29800.0, 1.0], [29900.0, 2.0], [30000.0, 1.0], [30100.0, 1.0], [30200.0, 2.0], [30300.0, 2.0], [30400.0, 3.0], [31300.0, 1.0], [31600.0, 1.0], [31900.0, 1.0], [32000.0, 1.0], [33800.0, 1.0], [160700.0, 3.0], [165500.0, 1.0], [170300.0, 3.0], [171100.0, 4.0], [169500.0, 2.0], [171900.0, 2.0], [174300.0, 15.0], [74800.0, 2.0], [78400.0, 3.0], [86000.0, 4.0], [88400.0, 1.0], [86400.0, 23.0], [86800.0, 20.0], [114400.0, 1.0], [121200.0, 1.0], [128800.0, 1.0]], "isOverall": false, "label": "get info ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 174600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 35.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 965.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 35.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 965.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 153.83223684210532, "minX": 1.70302446E12, "maxY": 716.5746924428822, "series": [{"data": [[1.70302458E12, 153.83223684210532], [1.70302446E12, 716.5746924428822], [1.70302452E12, 369.33858267716545]], "isOverall": false, "label": "Http URL/API Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70302458E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19326.0, "minX": 2.0, "maxY": 174592.0, "series": [{"data": [[2.0, 174578.5], [3.0, 174486.0], [4.0, 174495.0], [7.0, 174592.0], [10.0, 174552.0], [11.0, 174521.0], [15.0, 174564.5], [17.0, 174563.66666666666], [22.0, 174442.0], [23.0, 174460.0], [24.0, 174477.6], [25.0, 174495.0], [26.0, 174361.0], [32.0, 174346.8333333333], [37.0, 174390.2], [38.0, 174425.0], [40.0, 174408.5], [45.0, 174438.0], [46.0, 174472.0], [49.0, 174455.0], [48.0, 174441.5], [50.0, 174521.0], [57.0, 174464.0], [59.0, 174493.0], [58.0, 174464.83333333334], [63.0, 174502.0], [62.0, 174511.33333333334], [64.0, 174400.0], [71.0, 174423.5], [69.0, 174445.0], [68.0, 174399.5], [75.0, 174489.0], [74.0, 174427.66666666666], [76.0, 174426.0], [81.0, 174450.0], [90.0, 174523.7142857143], [89.0, 174471.5], [94.0, 174537.0], [93.0, 174561.0], [103.0, 174513.0], [102.0, 174497.0], [101.0, 174558.0], [100.0, 174516.0], [106.0, 174461.0], [105.0, 174534.0], [104.0, 174506.0], [111.0, 174049.0], [110.0, 174249.0], [109.0, 174402.0], [108.0, 174335.0], [115.0, 171076.0], [113.0, 173467.0], [112.0, 174007.0], [116.0, 171064.0], [122.0, 170397.0], [121.0, 170835.0], [120.0, 171040.75], [126.0, 170405.75], [135.0, 170211.0], [129.0, 170265.33333333334], [142.0, 170087.0], [137.0, 170245.33333333334], [136.0, 170270.0], [151.0, 170126.0], [150.0, 170097.0], [146.0, 170108.8], [145.0, 170111.0], [158.0, 169981.5], [154.0, 169975.0], [153.0, 170104.8], [167.0, 169896.5], [163.0, 169869.0], [175.0, 169889.33333333334], [172.0, 171972.0], [171.0, 169887.0], [170.0, 169898.66666666666], [183.0, 169789.3333333333], [177.0, 169771.0], [176.0, 171931.0], [187.0, 169811.33333333334], [184.0, 171880.0], [198.0, 169798.25], [194.0, 169771.0], [193.0, 169816.5], [205.0, 169851.0], [204.0, 169831.16666666666], [214.0, 169592.0], [213.0, 171466.0], [212.0, 171101.0], [211.0, 169814.25], [210.0, 169797.0], [221.0, 171172.5], [219.0, 169616.8], [231.0, 171014.0], [230.0, 169401.5], [228.0, 169408.0], [227.0, 169437.0], [226.0, 171082.0], [225.0, 171103.0], [224.0, 169485.33333333334], [239.0, 165843.0], [238.0, 166874.0], [237.0, 169109.0], [236.0, 170105.0], [235.0, 170173.0], [234.0, 170238.0], [233.0, 170340.0], [232.0, 170537.0], [247.0, 160729.0], [246.0, 160740.0], [245.0, 161961.0], [244.0, 162879.0], [243.0, 163676.0], [242.0, 163877.0], [241.0, 165533.0], [240.0, 165786.0], [255.0, 160699.0], [254.0, 160668.0], [253.0, 160662.0], [252.0, 160643.0], [251.0, 160655.0], [250.0, 160691.0], [249.0, 160655.0], [248.0, 160729.0], [270.0, 154904.0], [271.0, 154905.0], [269.0, 154904.0], [268.0, 154917.0], [267.0, 156480.0], [266.0, 156877.0], [265.0, 159367.0], [264.0, 160859.0], [263.0, 161048.0], [257.0, 160648.0], [256.0, 160677.0], [259.0, 160694.0], [258.0, 160654.0], [262.0, 161363.0], [261.0, 160518.0], [260.0, 160521.0], [285.0, 151059.0], [287.0, 150979.0], [284.0, 155372.0], [275.0, 154897.0], [274.0, 154886.0], [273.0, 154883.0], [272.0, 154864.0], [283.0, 154704.0], [282.0, 154725.0], [281.0, 154779.0], [279.0, 154762.0], [278.0, 154823.0], [277.0, 154821.0], [276.0, 154840.0], [302.0, 129075.0], [303.0, 129099.0], [300.0, 129445.0], [291.0, 130332.0], [290.0, 149800.5], [288.0, 150951.0], [299.0, 129435.0], [298.0, 129425.0], [297.0, 129458.0], [296.0, 129929.0], [295.0, 130120.0], [294.0, 130113.0], [293.0, 130371.0], [292.0, 130334.0], [315.0, 86830.0], [312.0, 86805.0], [308.0, 86858.0], [307.0, 86870.0], [306.0, 114419.0], [305.0, 121257.0], [304.0, 128872.0], [334.0, 86881.0], [335.0, 86910.0], [333.0, 86867.5], [331.0, 86814.0], [330.0, 86847.0], [327.0, 86886.5], [326.0, 86813.5], [322.0, 86773.2], [321.0, 86725.5], [349.0, 86435.0], [348.0, 86455.33333333333], [345.0, 86426.0], [344.0, 86395.2], [342.0, 86440.0], [338.0, 86434.0], [337.0, 86872.0], [367.0, 86460.0], [366.0, 86517.55555555556], [357.0, 86532.0], [354.0, 86511.0], [383.0, 85941.0], [382.0, 85948.25], [378.0, 86489.0], [376.0, 86455.0], [374.0, 86474.0], [373.0, 86441.0], [372.0, 86416.25], [370.0, 86389.0], [398.0, 85713.0], [399.0, 87111.0], [396.0, 85749.0], [384.0, 85982.0], [395.0, 88601.0], [394.0, 86017.5], [392.0, 85998.5], [390.0, 85991.0], [389.0, 85998.0], [388.0, 85983.0], [415.0, 77915.0], [413.0, 77906.5], [411.0, 78375.33333333333], [408.0, 78384.0], [407.0, 78474.0], [404.0, 78597.2], [431.0, 74894.5], [430.0, 74895.0], [428.0, 75081.0], [427.0, 75734.0], [423.0, 77879.66666666667], [420.0, 77862.0], [419.0, 77947.75], [446.0, 21039.0], [445.0, 30309.0], [435.0, 31647.0], [434.0, 31953.0], [433.0, 32036.0], [432.0, 33806.0], [443.0, 21043.0], [442.0, 21043.0], [441.0, 21042.0], [440.0, 30337.0], [439.0, 30470.0], [438.0, 30477.0], [437.0, 30498.0], [436.0, 31376.0], [461.0, 21032.0], [462.0, 21036.0], [460.0, 21041.0], [459.0, 30151.0], [458.0, 21037.0], [457.0, 21037.0], [455.0, 21033.5], [453.0, 25635.5], [451.0, 21036.0], [449.0, 21037.0], [448.0, 21035.5], [467.0, 21036.0], [478.0, 21036.5], [479.0, 21036.0], [476.0, 21038.0], [475.0, 21038.0], [473.0, 24033.333333333332], [470.0, 21035.0], [469.0, 21035.5], [466.0, 21038.5], [464.0, 21035.0], [494.0, 21017.0], [492.0, 21035.0], [488.0, 25497.0], [484.0, 21037.0], [483.0, 21032.0], [482.0, 21044.0], [481.0, 21034.5], [509.0, 21036.0], [508.0, 21035.0], [506.0, 21028.75], [505.0, 21032.0], [501.0, 21033.0], [500.0, 21024.0], [499.0, 21025.0], [497.0, 23966.333333333332], [529.0, 23924.666666666668], [543.0, 21047.0], [541.0, 21048.0], [540.0, 21047.5], [538.0, 21039.0], [525.0, 21052.0], [514.0, 21035.0], [513.0, 21044.0], [518.0, 21040.0], [516.0, 21036.0], [523.0, 29663.0], [522.0, 21053.0], [521.0, 21049.0], [535.0, 21052.0], [534.0, 21040.5], [530.0, 21049.0], [528.0, 21043.0], [562.0, 21050.5], [573.0, 21055.0], [575.0, 21054.0], [560.0, 21048.0], [572.0, 21052.0], [569.0, 21048.0], [568.0, 21049.0], [551.0, 21046.0], [549.0, 21048.25], [545.0, 21051.0], [558.0, 21049.0], [557.0, 23817.333333333332], [554.0, 21049.0], [553.0, 21050.0], [566.0, 21050.0], [565.0, 21050.0], [563.0, 21049.0], [605.0, 21037.0], [607.0, 21040.0], [603.0, 21036.0], [602.0, 21044.0], [601.0, 21042.6], [583.0, 21059.0], [582.0, 21062.0], [580.0, 21050.333333333332], [577.0, 21058.0], [596.0, 21041.0], [594.0, 21041.0], [593.0, 21044.0], [591.0, 21045.0], [590.0, 21046.0], [588.0, 21037.0], [587.0, 21048.0], [586.0, 21059.0], [585.0, 21060.0], [626.0, 21032.0], [637.0, 21032.0], [638.0, 21030.0], [624.0, 21029.5], [635.0, 21033.0], [634.0, 21033.0], [632.0, 21030.0], [615.0, 21036.5], [613.0, 24922.0], [611.0, 23641.0], [608.0, 21039.0], [622.0, 21031.0], [621.0, 21032.0], [619.0, 21033.0], [618.0, 21034.0], [616.0, 21034.0], [630.0, 21031.0], [629.0, 21032.0], [627.0, 21032.0], [658.0, 28436.0], [669.0, 21040.0], [670.0, 21038.0], [657.0, 21046.0], [656.0, 21046.5], [667.0, 21040.0], [666.0, 21041.0], [664.0, 21042.0], [647.0, 21026.0], [646.0, 21031.0], [645.0, 21036.5], [641.0, 21029.0], [640.0, 21029.5], [654.0, 21044.0], [652.0, 21031.666666666668], [649.0, 21024.5], [663.0, 21042.5], [661.0, 21044.0], [660.0, 21044.0], [701.0, 21030.0], [692.0, 21030.5], [703.0, 21030.5], [688.0, 21036.0], [690.0, 21033.0], [689.0, 21039.0], [700.0, 21031.0], [698.0, 21033.0], [697.0, 21033.5], [678.0, 21040.0], [677.0, 21040.0], [675.0, 21035.5], [673.0, 21036.0], [672.0, 21036.5], [686.0, 21033.5], [684.0, 21034.0], [683.0, 21035.0], [681.0, 21037.0], [680.0, 21037.5], [695.0, 21035.0], [694.0, 21024.0], [693.0, 21030.0], [722.0, 21038.0], [732.0, 21034.0], [734.0, 21034.5], [721.0, 27808.0], [720.0, 21039.5], [731.0, 21035.0], [730.0, 27690.0], [728.0, 21035.0], [710.0, 21010.0], [709.0, 21021.0], [706.0, 21028.5], [704.0, 21029.0], [718.0, 21031.0], [715.0, 21027.0], [714.0, 21018.0], [727.0, 21042.0], [726.0, 21042.5], [724.0, 21038.5], [760.0, 21038.5], [764.0, 27420.0], [765.0, 21041.0], [763.0, 23160.666666666668], [754.0, 21028.0], [753.0, 21031.0], [751.0, 21028.0], [737.0, 21035.0], [736.0, 21037.0], [740.0, 21035.0], [739.0, 21035.0], [743.0, 21032.0], [742.0, 21034.0], [749.0, 21029.0], [748.0, 21027.0], [746.0, 21028.0], [745.0, 21030.5], [797.0, 21050.0], [799.0, 21050.0], [796.0, 21051.0], [794.0, 27145.0], [793.0, 21042.0], [774.0, 21040.666666666668], [771.0, 21039.0], [770.0, 21058.0], [769.0, 21050.0], [768.0, 21046.0], [782.0, 21038.0], [781.0, 21042.25], [777.0, 21051.0], [776.0, 21050.0], [790.0, 21038.0], [789.0, 21038.0], [787.0, 21046.0], [784.0, 21036.5], [817.0, 21026.0], [829.0, 21025.0], [828.0, 21026.5], [826.0, 21026.0], [825.0, 21033.75], [813.0, 21040.666666666668], [807.0, 21033.5], [805.0, 21034.0], [804.0, 21036.0], [802.0, 21032.0], [800.0, 21049.0], [810.0, 21041.666666666668], [821.0, 21025.0], [820.0, 26883.0], [819.0, 21026.0], [816.0, 21038.666666666668], [849.0, 21051.0], [862.0, 21052.0], [861.0, 21053.0], [859.0, 21043.333333333332], [856.0, 21040.0], [846.0, 21043.0], [835.0, 21012.0], [833.0, 21033.75], [839.0, 21043.5], [837.0, 21032.666666666668], [843.0, 21039.0], [842.0, 21039.5], [840.0, 21040.0], [855.0, 21038.5], [853.0, 21064.333333333332], [852.0, 21045.0], [848.0, 21051.5], [893.0, 21060.5], [894.0, 21059.0], [891.0, 21056.0], [889.0, 26373.0], [888.0, 21056.0], [869.0, 21042.0], [868.0, 21064.0], [867.0, 21050.0], [879.0, 21062.0], [878.0, 21059.0], [875.0, 21048.0], [873.0, 21051.0], [872.0, 21047.333333333332], [887.0, 21064.0], [886.0, 21054.75], [882.0, 21057.0], [880.0, 21057.0], [914.0, 21051.0], [927.0, 21043.333333333332], [924.0, 21050.0], [922.0, 21045.5], [920.0, 21048.0], [911.0, 21053.0], [897.0, 21058.0], [896.0, 21058.0], [901.0, 21049.0], [900.0, 21045.0], [903.0, 21054.0], [902.0, 21059.0], [910.0, 21053.5], [908.0, 21054.0], [907.0, 21055.5], [905.0, 21052.0], [919.0, 21048.0], [917.0, 21050.0], [916.0, 21051.0], [913.0, 21051.5], [954.0, 21024.0], [946.0, 21041.0], [957.0, 21024.0], [959.0, 21021.5], [945.0, 21042.0], [956.0, 21021.5], [953.0, 21025.5], [935.0, 21043.0], [934.0, 21048.0], [933.0, 21051.0], [931.0, 22698.666666666668], [928.0, 21048.0], [943.0, 21043.0], [942.0, 21043.0], [940.0, 21044.0], [939.0, 21046.0], [937.0, 21042.0], [951.0, 21038.0], [949.0, 21039.0], [948.0, 21039.5], [988.0, 22865.0], [991.0, 21125.0], [977.0, 23179.0], [979.0, 24897.0], [978.0, 25086.0], [981.0, 24499.0], [980.0, 24667.0], [990.0, 21869.0], [989.0, 21033.0], [987.0, 23279.0], [986.0, 23505.0], [985.0, 23499.0], [984.0, 23824.0], [975.0, 21037.0], [962.0, 21019.5], [960.0, 21020.0], [965.0, 21018.0], [963.0, 21018.0], [967.0, 21019.0], [966.0, 21016.0], [974.0, 21021.666666666668], [971.0, 21013.0], [969.0, 21013.0], [968.0, 21010.0], [983.0, 24209.0], [982.0, 24361.0], [1000.0, 19326.0], [999.0, 19505.0], [998.0, 19507.0], [997.0, 19697.0], [996.0, 19728.0], [995.0, 20278.0], [994.0, 20661.0], [993.0, 20984.0], [992.0, 20889.0]], "isOverall": false, "label": "get info ", "isController": false}, {"data": [[501.40100000000024, 74028.04500000006]], "isOverall": false, "label": "get info -Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.70302446E12, "maxY": 48805.71666666667, "series": [{"data": [[1.70302458E12, 48805.71666666667], [1.70302446E12, 28137.366666666665], [1.70302452E12, 10662.183333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70302458E12, 193.75], [1.70302446E12, 0.0], [1.70302452E12, 25.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70302458E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21553.52548330405, "minX": 1.70302446E12, "maxY": 167769.98355263163, "series": [{"data": [[1.70302458E12, 167769.98355263163], [1.70302446E12, 21553.52548330405], [1.70302452E12, 84740.26771653544]], "isOverall": false, "label": "get info ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70302458E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70302446E12, "maxY": 6314.674342105265, "series": [{"data": [[1.70302458E12, 6314.674342105265], [1.70302446E12, 0.0], [1.70302452E12, 805.8188976377953]], "isOverall": false, "label": "get info ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70302458E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 19757.47275922671, "minX": 1.70302446E12, "maxY": 151313.16447368445, "series": [{"data": [[1.70302458E12, 151313.16447368445], [1.70302446E12, 19757.47275922671], [1.70302452E12, 81532.21259842519]], "isOverall": false, "label": "get info ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70302458E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 88499.0, "minX": 1.70302452E12, "maxY": 171972.0, "series": [{"data": [[1.70302458E12, 171972.0], [1.70302452E12, 121257.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70302458E12, 171797.2], [1.70302452E12, 121257.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70302458E12, 171972.0], [1.70302452E12, 121257.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70302458E12, 171947.4], [1.70302452E12, 121257.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70302458E12, 155372.0], [1.70302452E12, 88499.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70302458E12, 169109.0], [1.70302452E12, 101510.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70302458E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21035.0, "minX": 1.0, "maxY": 174487.0, "series": [{"data": [[1.0, 162879.0], [2.0, 163776.5], [4.0, 170205.5], [39.0, 171102.0], [5.0, 160859.0], [3.0, 155372.0], [56.0, 171931.0], [15.0, 161961.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 85834.5], [39.0, 169782.0], [46.0, 174464.5], [3.0, 23505.0], [12.0, 78161.5], [57.0, 86440.0], [14.0, 154873.5], [56.0, 169892.0], [15.0, 160672.5], [63.0, 174487.0], [4.0, 31800.0], [1.0, 128872.0], [5.0, 85749.0], [21.0, 170277.0], [97.0, 21046.0], [6.0, 130226.0], [103.0, 21042.0], [101.0, 21039.0], [104.0, 21035.0], [26.0, 21041.0], [110.0, 21042.0], [7.0, 129425.0], [31.0, 86834.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 110.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 164676.0, "series": [{"data": [[1.0, 82122.0], [2.0, 84020.5], [4.0, 25008.0], [39.0, 30292.0], [5.0, 24851.0], [3.0, 37135.0], [56.0, 164676.0], [15.0, 86225.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [39.0, 0.0], [46.0, 0.0], [3.0, 0.0], [12.0, 0.0], [57.0, 0.0], [14.0, 0.0], [56.0, 0.0], [15.0, 0.0], [63.0, 0.0], [4.0, 0.0], [1.0, 0.0], [5.0, 0.0], [21.0, 0.0], [97.0, 0.0], [6.0, 0.0], [103.0, 0.0], [101.0, 0.0], [104.0, 0.0], [26.0, 0.0], [110.0, 0.0], [7.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 110.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.916666666666667, "minX": 1.7030244E12, "maxY": 9.75, "series": [{"data": [[1.7030244E12, 9.75], [1.70302446E12, 6.916666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70302446E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70302446E12, "maxY": 8.583333333333334, "series": [{"data": [[1.70302458E12, 0.5166666666666667], [1.70302452E12, 0.06666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70302446E12, 0.8833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.70302446E12, 8.583333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.70302458E12, 0.8666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.70302458E12, 3.683333333333333], [1.70302446E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}, {"data": [[1.70302452E12, 2.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70302458E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.70302446E12, "maxY": 9.483333333333333, "series": [{"data": [[1.70302458E12, 0.5166666666666667], [1.70302452E12, 0.06666666666666667]], "isOverall": false, "label": "get info -success", "isController": false}, {"data": [[1.70302458E12, 4.55], [1.70302446E12, 9.483333333333333], [1.70302452E12, 2.05]], "isOverall": false, "label": "get info -failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70302458E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.70302446E12, "maxY": 9.483333333333333, "series": [{"data": [[1.70302458E12, 0.5166666666666667], [1.70302452E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70302458E12, 4.55], [1.70302446E12, 9.483333333333333], [1.70302452E12, 2.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70302458E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

